{"ast":null,"code":"// 导入所有的模块或者子模块，使用 TYPES.<type> 的形式来引用类型\nimport * as TYPES from '../action-types';\n// 导入默认的模块或者对象。使用 _.<method> 的形式来调用 utils 中定义的方法或者属性。\nimport _ from '../../assets/utils';\nlet initial = {\n  info: null\n};\nexport default function baseReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  // reducer函数必须是一个纯函数，不能修改函数参数state\n  // 使用 lodash 库的方法来复制 state 对象，它表示创建一个新的对象，它的属性和值和原来的 state 对象一样，但是没有引用关系。\n  state = _.clone(state);\n  switch (action.type) {\n    // 更新登录者信息\n    case TYPES.BASE_INFO:\n      state.info = action.info;\n      break;\n    default:\n  }\n  return state;\n}\n;","map":{"version":3,"names":["TYPES","_","initial","info","baseReducer","state","action","clone","type","BASE_INFO"],"sources":["/Users/clementine/Desktop/02知乎日报/zhihu/src/store/reducer/base.js"],"sourcesContent":["// 导入所有的模块或者子模块，使用 TYPES.<type> 的形式来引用类型\nimport * as TYPES from '../action-types';\n// 导入默认的模块或者对象。使用 _.<method> 的形式来调用 utils 中定义的方法或者属性。\nimport _ from '../../assets/utils';\n\nlet initial = {\n    info: null\n};\nexport default function baseReducer(state = initial, action) {\n    // reducer函数必须是一个纯函数，不能修改函数参数state\n    // 使用 lodash 库的方法来复制 state 对象，它表示创建一个新的对象，它的属性和值和原来的 state 对象一样，但是没有引用关系。\n    state = _.clone(state);\n    switch (action.type) {\n        // 更新登录者信息\n        case TYPES.BASE_INFO:\n            state.info = action.info;\n            break;\n        default:\n    }\n    return state;\n};"],"mappings":"AAAA;AACA,OAAO,KAAKA,KAAK,MAAM,iBAAiB;AACxC;AACA,OAAOC,CAAC,MAAM,oBAAoB;AAElC,IAAIC,OAAO,GAAG;EACVC,IAAI,EAAE;AACV,CAAC;AACD,eAAe,SAASC,WAAW,GAA0B;EAAA,IAAzBC,KAAK,uEAAGH,OAAO;EAAA,IAAEI,MAAM;EACvD;EACA;EACAD,KAAK,GAAGJ,CAAC,CAACM,KAAK,CAACF,KAAK,CAAC;EACtB,QAAQC,MAAM,CAACE,IAAI;IACf;IACA,KAAKR,KAAK,CAACS,SAAS;MAChBJ,KAAK,CAACF,IAAI,GAAGG,MAAM,CAACH,IAAI;MACxB;IACJ;EAAQ;EAEZ,OAAOE,KAAK;AAChB;AAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}